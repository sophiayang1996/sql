*********************************************************************************************************************************************************************
eg1:

Table: Customers

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| customer_id   | int     |
| customer_name | varchar |
+---------------+---------+
customer_id is the primary key for this table.
Each row of this table contains the name and the id customer.
 

Write an SQL query to find the missing customer IDs. The missing IDs are ones that are not in the Customers table but are in the range between 1 and the maximum customer_id present in the table.

Notice that the maximum customer_id will not exceed 100.

Return the result table ordered by ids in ascending order.

The query result format is in the following example. 

Customers table:
+-------------+---------------+
| customer_id | customer_name |
+-------------+---------------+
| 1           | Alice         |
| 4           | Bob           |
| 5           | Charlie       |
+-------------+---------------+

Result table:
+-----+
| ids |
+-----+
| 2   |
| 3   |
+-----+
The maximum customer_id present in the table is 5, so in the range [1,5], IDs 2 and 3 are missing from the table.

answer:

WITH RECURSIVE seq AS (
  SELECT 1 n
  UNION ALL
  SELECT n + 1 FROM seq WHERE n + 1 < (SELECT MAX(Customer_id) FROM Customers)
)
SELECT n ids
FROM seq
WHERE n NOT IN (SELECT DISTINCT customer_id FROM Customers)


最后一个值是=max
注意要with多个cte的时候只有一个with，每一个都要加上“，”



***********************************************************************************************************************************************************************
eg 2:
Table: Tasks

+----------------+---------+
| Column Name    | Type    |
+----------------+---------+
| task_id        | int     |
| subtasks_count | int     |
+----------------+---------+
task_id is the primary key for this table.
Each row in this table indicates that task_id was divided into subtasks_count subtasks labelled from 1 to subtasks_count.
It is guaranteed that 2 <= subtasks_count <= 20. 

Table: Executed

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| task_id       | int     |
| subtask_id    | int     |
+---------------+---------+
(task_id, subtask_id) is the primary key for this table.
Each row in this table indicates that for the task task_id, the subtask with ID subtask_id was executed successfully.
It is guaranteed that subtask_id <= subtasks_count for each task_id.
 

Write an SQL query to report the IDs of the missing subtasks for each task_id.

Return the result table in any order.

The query result format is in the following example:
 

Tasks table:
+---------+----------------+
| task_id | subtasks_count |
+---------+----------------+
| 1       | 3              |
| 2       | 2              |
| 3       | 4              |
+---------+----------------+

Executed table:
+---------+------------+
| task_id | subtask_id |
+---------+------------+
| 1       | 2          |
| 3       | 1          |
| 3       | 2          |
| 3       | 3          |
| 3       | 4          |
+---------+------------+

Result table:
+---------+------------+
| task_id | subtask_id |
+---------+------------+
| 1       | 1          |
| 1       | 3          |
| 2       | 1          |
| 2       | 2          |
+---------+------------+
Task 1 was divided into 3 subtasks (1, 2, 3). Only subtask 2 was executed successfully, so we include (1, 1) and (1, 3) in the answer.
Task 2 was divided into 2 subtasks (1, 2). No subtask was executed successfully, so we include (2, 1) and (2, 2) in the answer.
Task 3 was divided into 4 subtasks (1, 2, 3, 4). All of the subtasks were executed successfully.

answer:

with recursive cte as(
    select task_id, subtasks_count n
    from tasks
    union all
    select task_id, n-1 n
    from cte
    where n > 1)

select cte.task_id, n subtask_id
from cte
left join executed e
on cte.task_id = e.task_id
and cte.n = e.subtask_id
where e.subtask_id is null

注意最后返回值是n=1




recursive cte:
A recursive CTE consists of three main parts:

An initial query that forms the base result set of the CTE structure. The initial query part is referred to as an anchor member.
A recursive query part is a query that references to the CTE name, therefore, it is called a recursive member. The recursive member is joined with the anchor member by aUNION ALL or UNION DISTINCT operator.
A termination condition that ensures the recursion stops when the recursive member returns no row.


The execution order of a recursive CTE is as follows:

First, separate the members into two: anchor and recursive members.
Next, execute the anchor member to form the base result set ( R0) and use this base result set for the next iteration.
Then, execute the recursive member with Ri result set as an input and make Ri+1 as an output.
After that, repeat the third step until the recursive member returns an empty result set, in other words, the termination condition is met.
Finally, combine result sets from R0 to Rn using UNION ALL operator.



************************************************************************************************************************************************************************
eg3.
WITH RECURSIVE employee_paths AS
  ( SELECT employeeNumber,
           reportsTo managerNumber,
           officeCode, 
           1 lvl
   FROM employees
   WHERE reportsTo IS NULL
     UNION ALL
     SELECT e.employeeNumber,
            e.reportsTo,
            e.officeCode,
            lvl+1
     FROM employees e
     INNER JOIN employee_paths ep ON ep.employeeNumber = e.reportsTo )
     
SELECT employeeNumber,
       managerNumber,
       lvl,
       city
FROM employee_paths ep
INNER JOIN offices o USING (officeCode)
ORDER BY lvl, city;

recursive的循环在where 比较符号中，与while的逻辑是一样的，return最后的是不满足的，所以<最后一个值是=
所以在1-12中，where n<12


*******************************************************************************************************************************************************************
eg4:

Table: Product

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| product_id    | int     |
| product_name  | varchar |
+---------------+---------+
product_id is the primary key for this table.
product_name is the name of the product.
 

Table: Sales

+---------------------+---------+
| Column Name         | Type    |
+---------------------+---------+
| product_id          | int     |
| period_start        | date    |
| period_end          | date    |
| average_daily_sales | int     |
+---------------------+---------+
product_id is the primary key for this table. 
period_start and period_end indicates the start and end date for sales period, both dates are inclusive.
The average_daily_sales column holds the average daily sales amount of the items for the period.

Write an SQL query to report the Total sales amount of each item for each year, with corresponding product name, product_id, product_name and report_year.

Dates of the sales years are between 2018 to 2020. Return the result table ordered by product_id and report_year.

The query result format is in the following example:

Product table:
+------------+--------------+
| product_id | product_name |
+------------+--------------+
| 1          | LC Phone     |
| 2          | LC T-Shirt   |
| 3          | LC Keychain  |
+------------+--------------+

Sales table:
+------------+--------------+-------------+---------------------+
| product_id | period_start | period_end  | average_daily_sales |
+------------+--------------+-------------+---------------------+
| 1          | 2019-01-25   | 2019-02-28  | 100                 |
| 2          | 2018-12-01   | 2020-01-01  | 10                  |
| 3          | 2019-12-01   | 2020-01-31  | 1                   |
+------------+--------------+-------------+---------------------+

Result table:
+------------+--------------+-------------+--------------+
| product_id | product_name | report_year | total_amount |
+------------+--------------+-------------+--------------+
| 1          | LC Phone     |    2019     | 3500         |
| 2          | LC T-Shirt   |    2018     | 310          |
| 2          | LC T-Shirt   |    2019     | 3650         |
| 2          | LC T-Shirt   |    2020     | 10           |
| 3          | LC Keychain  |    2019     | 31           |
| 3          | LC Keychain  |    2020     | 31           |
+------------+--------------+-------------+--------------+



answer:

# Write your MySQL query statement below

with recursive yearin as (
    select product_id, year(period_start) yr, period_end
    from sales s
    union all
    select product_id, yr+1,  period_end
    from yearin
    where yr < year(period_end))
    
select cast(p.product_id as char) product_id, product_name, cast(yr as char) report_year, 
(case 
    when yr = year(period_start) and yr = year(s.period_end) then (datediff(s.period_end,period_start)+1) * average_daily_sales
    when yr = year(period_start) and yr!= year(s.period_end) then
(datediff(concat(yr,"-12-31"),period_start)+1)* average_daily_sales
    when yr = year(s.period_end) and yr!= year(period_start) then
(datediff(s.period_end, concat(yr,"-01-01"))+1)*average_daily_sales 
    else dayofyear(concat(yr,"-12-31"))*average_daily_sales end)  total_amount
from product p
join sales s
on p.product_id = s.product_id
join yearin y
on y.product_id = s.product_id 
order by product_id, report_year


